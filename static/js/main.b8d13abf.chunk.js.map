{"version":3,"sources":["woman.svg","Resume.js","App.js","serviceWorker.js","index.js","person.svg"],"names":["module","exports","Resume","prop","fetch","then","response","json","data","console","log","info","profiles","location","id","classname","className","basics","gender","src","profileIcon","alt","style","width","profileIcon1","name","fontStyle","role","href","email","mobile","Example","Home","map","value","index","key","boxshadow","to","pathName","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,mC,oMC4C5BC,EAvCJ,SAACC,GACRC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAI,OAAEC,QAAQC,IAAIF,MACxB,IAAIG,EAAKH,EAAKI,SAAST,EAAKU,SAASL,KAAKM,IAC1C,OAEC,yBAAKC,UAAU,8BACb,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,eACX,yBAAKA,UAAU,iBACc,SAArBL,EAAKM,OAAOC,OAAkB,yBAAKC,IAAKC,IAAaC,IAAI,eAAeC,MAAO,CAACC,MAAM,SAAW,yBAAKJ,IAAKK,IAAcH,IAAI,eAAeC,MAAO,CAACC,MAAM,SAC7J,gCAAMZ,EAAKM,OAAOQ,KAAlB,KACI,wBAAIT,UAAU,iBAAiBM,MAAO,CAACI,UAAU,WAAYf,EAAKM,OAAOU,MAHlF,IAG6F,6BAEhG,uBAAGC,KAAM,UAAUjB,EAAKM,OAAOY,OAA/B,IAAwClB,EAAKM,OAAOY,OALjD,IAK4D,6BAEvE,uBAAGD,KAAM,OAAOjB,EAAKM,OAAOa,QAA5B,IAAsCnB,EAAKM,OAAOa,QAPvC,IAOmD,gCAQ3D,yBAAKd,UAAU,gBACb,yBAAKA,UAAU,eACV,yBAAKA,UAAU,8BCVvBe,EAAQ,WACX,OACC,6BACC,qDAKCC,EAAK,WACP,IAAIpB,EAASJ,EAAKI,SAElB,OADAH,QAAQC,IAAIE,GAEX,yBAAKI,UAAU,8BACbJ,EAASqB,KAAI,SAACC,EAAMC,GAAP,OACZ,yBAAKnB,UAAU,mCAAmCoB,IAAKD,GACrD,yBAAKnB,UAAU,OAAOM,MAAO,CAACe,UAAU,0BACtC,yBAAKrB,UAAU,yBAES,SAAtBkB,EAAMjB,OAAOC,OAAkB,yBAAKC,IAAKC,IAAaC,IAAI,eAAeC,MAAO,CAACC,MAAM,SAAY,yBAAKJ,IAAKK,IAAcH,IAAI,eAAeC,MAAO,CAACC,MAAM,SAC7J,gCAAMW,EAAMjB,OAAOQ,KAAnB,KACA,wBAAIT,UAAU,iBAAiBM,MAAO,CAACI,UAAU,WAAYQ,EAAMjB,OAAOU,MAJ3E,IAIsF,6BAEtF,uBAAGC,KAAM,UAAUM,EAAMjB,OAAOY,OAAhC,IAAyCK,EAAMjB,OAAOY,OANtD,IAMiE,6BAEzE,uBAAGD,KAAM,OAAOM,EAAMjB,OAAOa,QAA7B,IAAuCI,EAAMjB,OAAOa,QAR5C,IAQwD,6BAChE,kBAAC,IAAD,CAAMQ,GAAI,CAACC,SAAS,UAAU/B,KAAK,CAACM,GAAGqB,IAASnB,UAAU,iDAA1D,yBAaawB,EApDP,WAEP,OAEG,kBAAC,IAAD,KACC,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWZ,IACvC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,UAAUC,UAAWzC,OCJxB0C,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,a,irBEzI5B5D,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.b8d13abf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/woman.b935d5cc.svg\";","import React from 'react';\r\nimport data from './data/data.json';\r\nimport profileIcon from './person.svg';\r\nimport profileIcon1 from './woman.svg';\r\n\r\nlet Resume=(prop)=>{\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n    .then(response=>response.json())\r\n    .then(data=>console.log(data))\r\n    let info=data.profiles[prop.location.data.id];\r\n    return(\r\n\r\n    \t<div classname=\"row justify-content-center\">\r\n    \t  <div className=\"col-lg-3 m-2\">\r\n    \t    <div className=\"card shadow\">\r\n    \t        <div className=\"card-body p-2\">\r\n                    {info.basics.gender===\"male\" ? <img src={profileIcon} alt=\"Profile icon\" style={{width:\"30%\"}}/>: <img src={profileIcon1} alt=\"Profile icon\" style={{width:\"30%\"}}/>}\r\n    \t             <h2> {info.basics.name} </h2>\r\n                      <h5 className=\"text-secondary\" style={{fontStyle:\"italic\"}}>{info.basics.role}</h5> <hr />\r\n\r\n          <a href={\"mailto:\"+info.basics.email}> {info.basics.email}</a> <br>\r\n          </br>\r\n  <a href={\"tel:\"+info.basics.mobile}> {info.basics.mobile}</a> <br />\r\n                </div>\r\n            </div>\r\n          </div>\r\n        \r\n\r\n\r\n\r\n    \t<div className=\"col-lg-8 m-2\">\r\n    \t  <div className=\"card shadow\">\r\n            <div className=\"card-body text-center\">\r\n                   \r\n             </div>              \r\n            </div>          \r\n          </div>\r\n        </div>\r\n    \r\n      \r\n)        \r\n}\r\n\r\n\r\nexport default Resume;","import React from 'react';\nimport data from './data/data.json';\nimport profileIcon from './person.svg';\nimport profileIcon1 from './woman.svg';\nimport {BrowserRouter,Route,Switch,Link} from 'react-router-dom';\nimport Resume from './Resume';\n\n\nlet App=()=>{\n\n return(\n\n \t  <BrowserRouter>\n \t   <Switch>\n \t   <Route exact path='/sample' component={Example}/>\n \t   <Route exact path='/' component={Home}/>\n \t   <Route exact path='/resume' component={Resume}/>\n \t   </Switch>\n \t  </BrowserRouter>\n  )\t   \n}\n\nlet Example=()=>{\n\treturn(\n\t <div>\n\t  <h2> Example component </h2>\n\t </div>\n )\n}\n\nlet Home=()=>{   \t  \t\n  let profiles=data.profiles;\n  console.log(profiles);\n  return(\n  \t<div className=\"row justify-content-center\">\n    {profiles.map((value,index)=>(\n      <div className=\"col-lg-4 col-md-4 col-sm-10 mt-1\" key={index}>\n        <div className=\"card\" style={{boxshadow:\"0px 8px 8px -8px #000\"}}>\n          <div className=\"card-body text-center\">\n           {/*<img src={profileIcon} alt=\"profileIcon\" style={{width:\"30%\"}}/> */}\n           {value.basics.gender===\"male\" ? <img src={profileIcon} alt=\"Profile icon\" style={{width:\"30%\"}}/> : <img src={profileIcon1} alt=\"Profile icon\" style={{width:\"30%\"}}/>}\n           <h3> {value.basics.name} </h3>\n           <h5 className=\"text-secondary\" style={{fontStyle:\"italic\"}}>{value.basics.role}</h5> <hr />\n\n          <a href={\"mailto:\"+value.basics.email}> {value.basics.email}</a> <br>\n          </br>\n  <a href={\"tel:\"+value.basics.mobile}> {value.basics.mobile}</a> <br />\n  <Link to={{pathName:'/resume',data:{id:index}}} className=\"btn btn-secondary text-white btn-block btn-sm\"> View profile\n  </Link>\n         \n\n          </div>\n      </div>\n    </div>\n  ))}\n\n </div>\n )            \n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/person.ef758973.svg\";"],"sourceRoot":""}